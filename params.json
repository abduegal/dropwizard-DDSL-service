{"name":"Dropwizard-ddsl-service","tagline":"A standalone service discover and load balancer module for dropwizard","body":"[Dropwizard] - DDSL service\r\n=========\r\n\r\nA [Dropwizard] service that serves as a [DDSL] (Dynamic Distributed Service Locator).  \r\n  \r\n#### The Dropwizard service contains the following:\r\n  - Runs the [DDSL] host / provider (No need to manually install / configure Zookeeper :) )\r\n  - Allows you to configure the [DDSL] host / provider settings (Host adres, port etc) in 1 file.\r\n  - Listens to other service that can be registered through [DDSL]\r\n  - Configures the load balancer (<B>nginx</B>) and triggers an update when service are added.  \r\n\r\nHow does it work\r\n=========\r\n\r\nYou can start the microservice (after installing [nginx]) with the following command:  \r\n - Navigate to the Dist folder \r\n```sh\r\njava -jar ddsl-service-1.0.jar server ddsl.yml\r\n```  \r\n\r\nThe DDSL service wil then listen to other services. Other services (created with i.e. Play Framework, Dropwizard or Ruby) can register to the DDSL service after providing their name, version # and location.  \r\nThe DDSL service will then build a configuration file for the HTTP server ([nginx]) which will serve as a load balancer.\r\n\r\nWhat is DDSL\r\n=========\r\n\r\nDDSL - Dynamic Distributed Service Locator.\r\nMore information can be found here: https://github.com/mbknor/ddsl\r\n\r\n#### Dynamic\r\n - No admin needed\r\n - You don't have to manually add your service / version to the repository\r\n - Your application can automatically register its location. -- It can also register it's \"quality\" (Clients will preferred locations with better \"quality\"\r\n - Locations on \"localhost\" will be preferred\r\n - You can mix several \"environments\" (prod, test) within the same DDSL-repository\r\n - Automatically load balancing between multiple locations with same \"quality\"\r\n - Service is automatically removed from repository, if it crashes/go down\r\n\r\n#### Distributed\r\n - DDSL has no single point of failure\r\n - It uses ZooKeeper as its dynamic distributed storage\r\n\r\n#### Service locator\r\n - A repository of services (with version) and their current locations\r\n\r\n#### Where Does it help\r\nIn many big companies you have a lot of services (SOAP, REST, etc) spread across many servers on several different Web Containers/Application Servers/ESB (Weblogic, Glassfish, Tomcat, Jetty, Mule, etc). You also have several different environments: test, preprod, prod etc with different servers and databases etc.\r\n\r\nOne service might use several other services.\r\n\r\nYou might also have (or want) several different versions of one service to run at the same time.\r\n\r\nAll those service locations... This means a lot of configuring\r\n\r\nThis is where DDSL helps..\r\n\r\nDifferences with the other [configwriter]\r\n==========\r\nThe configwriter in this module works slightly different from the [configwriter] created by mbknor.  \r\nSince this configwriter is also able to support multiple different services at the same time. And is thus able to run multiple services on a single port #, by using the DDSL name attribute to resolve the location path.\r\n\r\nFor example:  \r\nYou have 4 identical authentication services running on: 127.0.0.1/xxxx/api/auth.  \r\nYou also have 3 identical calculation services running on: 127.0.0.1/xxxx/api/calc.   \r\nThese 7 services are hosted on different ports (and maybe on different hosts aswell)  \r\nThe load balancer is hosted for example on port 7080 and on hostname: 127.0.0.1  \r\nThe result will then be as follow:  \r\n127.0.0.1:7080/api/auth will resolve to: the authentication services\r\n127.0.0.1:7080/api/calc will resolve to: the calculation services.  \r\n  \r\nYou also don't have to predefine the services since this configwriter uses the: getAllAvailableServices method.  \r\n  \r\nBackwards compatibility has been kept :)  \r\n\r\nVersion\r\n----\r\n\r\n1.0 - First release.\r\n\r\nTech\r\n-----------\r\n\r\nDropwizard DDSL service uses a number of open source projects to work properly:\r\n\r\n* [DDSL] - the Dynamic Distributed Service Locator\r\n* [Zookeeper] - as its dynamic distributed storage\r\n* [Dropwizard] - a Java framework for developing services.\r\n\r\nInstallation\r\n--------------\r\n\r\n#### step 1:\r\nInstall [nginx] and run it.\r\n#### step 2:\r\nEdit the ddsl.yml to your needs.\r\n#### step 3:\r\nCreate the jar file:\r\n```\r\nmvn package\r\n```\r\nOr\r\nrun the already packaged jar in the dist directory directly.  \r\nNavigate to the Dist folder \r\n```sh\r\njava -jar ddsl-service-1.0.jar server ddsl.yml\r\n```  \r\n#### Step 4:\r\nRun other services and let them connect with the [DDSL] library.\r\nThere are also DDSL plugins available for: Play Framework 1.x, Play Framework 2, Dropwizard and Ruby\r\n\r\n#### Step 5:\r\nConfigure nginx with your service:\r\n```\r\nnginx -c /absolute/path/to/your/configfile/generatedConfig.conf\r\n```\r\n\r\nLicense\r\n----\r\n\r\nMIT\r\n\r\n[DDSL]:https://github.com/mbknor/ddsl\r\n[Dropwizard]:https://dropwizard.codahale.com\r\n[nginx]:http://wiki.nginx.org/Main\r\n[Zookeeper]:http://zookeeper.apache.org/\r\n[configwriter]:https://github.com/mbknor/ddslConfigWriter","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}